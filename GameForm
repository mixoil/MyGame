using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MyGame
{
    public partial class GameForm : Form
    {
        public GameField Field;
        public Timer Timer;
        public int Time;

        private bool IsPressedW;
        private bool IsPressedD;
        private bool IsPressedS;
        private bool IsPressedA;

        public GameForm(int level)
        {
            Load += (sender, args) =>
            {
                FormBorderStyle = FormBorderStyle.FixedDialog;
                MaximizeBox = false;
                DoubleBuffered = true;
                Text = "The Last Savior. Level " + level.ToString();
                BackgroundImage = Properties.Resources.Empty;
                KeyPreview = true;
            };
            Time = 0;
            Timer = new Timer
            {
                Interval = 10
            };
            var map = Level.LoadLevel(1);
            var Field = new GameField(map);
            ClientSize = new Size(Field.Width * GameField.CellSize, Field.Height * GameField.CellSize + 150);
            SetEnvironment(Field);
            MakeLowerPanel(Field);
            Shooting.Projectiles = new HashSet<Projectile>();
            var timeLabel = new Label
            {
                Size = new Size(200, 60),
                Font = new Font("Bold", 28, FontStyle.Bold),
                ForeColor = Color.White,
                TextAlign = ContentAlignment.TopCenter,
                BackgroundImage = Properties.Resources.ButtonBack,
                Location = new Point(45, Field.Height * GameField.CellSize + 45),
                BorderStyle = BorderStyle.FixedSingle
            };
            Controls.Add(timeLabel);
            timeLabel.BringToFront();
            Timer.Tick += (sender, args) =>
            {
                Time++;
                timeLabel.Text = Time.ToString();
                Field.Soldier.Move(Field, IsPressedA, IsPressedD, IsPressedS, IsPressedW, /*Скорость в пикселях на тик */2);
                Shooting.Projectiles = Shooting.Projectiles.Where(p => p.IsActive).ToHashSet();
                foreach (var projectile in Shooting.Projectiles)
                    projectile.FlyTick(Field);
                Invalidate();
            };
            Paint += (sender, args) =>
            {
                args.Graphics.DrawImage(Field.Soldier.Model, Field.Soldier.Location);
                foreach (var projectile in Shooting.Projectiles)
                    args.Graphics.DrawLine(new Pen(Color.Black, 3), projectile.CurrentLocation, projectile.GetSecondDrawingPoint());
            };
            KeyDown += (sender, args) =>
            {
                //Перемещение
                switch (args.KeyCode)
                {
                    case Keys.D:
                        IsPressedD = true;
                        break;
                    case Keys.A:
                        IsPressedA = true;
                        break;
                    case Keys.W:
                        IsPressedW = true;
                        break;
                    case Keys.S:
                        IsPressedS = true;
                        break;
                }
                //Поворот
                if (args.KeyCode == Keys.I || args.KeyCode == Keys.K ||
                args.KeyCode == Keys.L || args.KeyCode == Keys.J)
                    Field.Soldier.Turn(args);
                if (args.KeyCode == Keys.F)
                    Shooting.MakeShot(Field.Soldier);
            };
            KeyUp += (sender, args) =>
            {
                switch (args.KeyCode)
                {
                    case Keys.D:
                        IsPressedD = false;
                        break;
                    case Keys.A:
                        IsPressedA = false;
                        break;
                    case Keys.W:
                        IsPressedW = false;
                        break;
                    case Keys.S:
                        IsPressedS = false;
                        break;
                }
            };
            Timer.Start();
            FormClosing += (sender, args) => Application.Exit();
            
            
        }

        private void SetEnvironment(GameField field)
        {
            for (var x = 0; x < field.Width; x++)
                for (var y = 0; y < field.Height; y++)
                {
                    if (field[x, y] != CellState.Wall)
                        continue;
                    var picture = new PictureBox
                    {
                        Location = new Point(x * GameField.CellSize, y * GameField.CellSize),
                        Size = new Size(GameField.CellSize, GameField.CellSize),
                        Image = Properties.Resources.Wall
                    };
                    picture.SendToBack();
                    Controls.Add(picture);
                }
        }

        private void MakeLowerPanel(GameField field)
        {
            var lowerPanel = new PictureBox
            {
                Location = new Point(0, field.Height * GameField.CellSize),
                Size = new Size(field.Width * GameField.CellSize, 150),
                Image = Properties.Resources.LowerPanel,
                BorderStyle = BorderStyle.Fixed3D,
            };
            var exitButton = new Button
            {
                Text = "Exit",
                Size = new Size(200, 60),
                Font = new Font("Bold", 28, FontStyle.Bold),
                ForeColor = Color.White,
                TextAlign = ContentAlignment.TopCenter,
                Location = new Point(field.Width * GameField.CellSize - 245, lowerPanel.Top + 45),
                BackgroundImage = Properties.Resources.ButtonBack
            };
            exitButton.Click += (sender, args) => Application.Exit();
            Controls.Add(lowerPanel);
            Controls.Add(exitButton);
            lowerPanel.SendToBack();
        }
    }
}
