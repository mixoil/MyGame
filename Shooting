using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyGame
{
    class Shooting
    {
        public static HashSet<Projectile> Projectiles;
        public static void MakeShot(IWarrior shooter)
        {
            var projectile = new Projectile(shooter);
            Projectiles.Add(projectile);
        }
    }

    class Projectile
    {
        public Point CurrentLocation;
        public Direction DirectionOfMoving;
        public bool IsActive;
        public int Damage;
        public int Speed; //в пикселях на тик
        public int TrackLength;

        public Projectile(IWarrior shooter)
        {
            IsActive = true;
            switch (shooter.Weapon)
            {
                case Gun.M9:
                    Damage = 45;
                    Speed = 30;
                    TrackLength = 10;
                    switch (shooter.ViewDirection)
                    {
                        case Direction.Down:
                            CurrentLocation = new Point(shooter.Location.X + 33, shooter.Location.Y + 69 + TrackLength);
                            break;
                        case Direction.Up:
                            CurrentLocation = new Point(shooter.Location.X + 41, shooter.Location.Y + 5 - TrackLength);
                            break;
                        case Direction.Left:
                            CurrentLocation = new Point(shooter.Location.X + 5 - TrackLength, shooter.Location.Y + 33);
                            break;
                        case Direction.Right:
                            CurrentLocation = new Point(shooter.Location.X + 69 + TrackLength, shooter.Location.Y + 41);
                            break;
                    }
                    break;
            }
            DirectionOfMoving = shooter.ViewDirection;
            }

        public void FlyTick(GameField field)
        {
            var newLocation = PointFinder(Speed);
            if (FindedObstacle(newLocation, field))
                IsActive = false;
            CurrentLocation = newLocation;
        }

        private bool FindedObstacle(Point newLocation, GameField field)
        {
            var cellPoint = GameField.GetCellFromPixelsLocation(newLocation.X, newLocation.Y);
            return !(newLocation.X < field.Width * GameField.CellSize &&
                    newLocation.Y < field.Height * GameField.CellSize &&
                    newLocation.X >= 0 && newLocation.Y >= 0 &&
                    field[cellPoint.X, cellPoint.Y] != CellState.Wall);
        }

        public Point GetSecondDrawingPoint()
        {
            return PointFinder(-TrackLength);
        }

        private Point PointFinder(int argument)
        {
            switch (DirectionOfMoving)
            {
                case Direction.Down:
                    return new Point(CurrentLocation.X, CurrentLocation.Y + argument);
                case Direction.Up:
                    return new Point(CurrentLocation.X, CurrentLocation.Y - argument);
                case Direction.Left:
                    return new Point(CurrentLocation.X - argument, CurrentLocation.Y);
                case Direction.Right:
                    return new Point(CurrentLocation.X + argument, CurrentLocation.Y);
                default:
                    throw new NullReferenceException();
            }
        }
    }

    public enum Gun
    {
        M9
    }
}
