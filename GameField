using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;

namespace MyGame
{
    public enum Direction
    {
        Up,
        Down,
        Left,
        Right
    }

    public class GameField
    {
		public Player Soldier;
		public List<Bot> Bots;
        public CellState[,] Field;
        public readonly int Width;
        public readonly int Height;
        public const int CellSize = 75;
        public GameField(string[] lines)
		{
            Width = lines[0].Length;
            Height = lines.Length;
            Bots = new List<Bot>();
			Field = new CellState[lines[0].Length, lines.Length];
			for (var y = 0; y < lines.Length; y++)
			{
				for (var x = 0; x < lines[0].Length; x++)
				{
					switch (lines[y][x])
					{
						case '#':
							Field[x, y] = CellState.Wall;
							break;
						case 'P':
							Field[x, y] = CellState.Empty;
                            if (Soldier != null) throw new ArgumentException();
							Soldier = new Player(new Point(x * CellSize, y * CellSize));
							break;
						case 'B':
							Field[x, y] = CellState.Empty;
							Bots.Add(new Bot(new Point(x, y)));
							break;
						default:
							Field[x, y] = CellState.Empty;
							break;
					}
				}
			}
		}

        public CellState this[int x, int y]
        {
            get { return Field[x, y]; }
            set { this[x, y] = value; }
        }

        public static Point GetCellFromPixelsLocation(int x, int y)
        {
            return new Point((x) / GameField.CellSize, (y) / GameField.CellSize);
        }
    }

    class Level
    {
        public static string[] LoadLevel(int level)
        {
            string[] result = null;
            switch (level)
            {
                case 1:
                    result = Level.Level1;
                    break;
            }
            return result;
        }

        private static readonly string[] Level1 = new string[]
        {
            "##########",
            "#OOOO#OOO#",
            "#OOOOOOOO#",
            "#OOOO#OOO#",
            "########O#",
            "#OOOOOOOO#",
            "#OOOOOOOO#",
            "####O#####",
            "OOOOOOOOOO",
            "OOOOPOOOOO",
        };
    }
}
